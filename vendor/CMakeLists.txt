# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# spdlog
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/spdlog")
else()
	set(CMAKE_FOLDER spdlog)
endif()
add_subdirectory(spdlog)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# zydis
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/zydis")
else()
	set(CMAKE_FOLDER zydis)
endif()
add_subdirectory(zydis)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target asmjit
set(CMKR_TARGET asmjit)
set(asmjit_SOURCES "")

list(APPEND asmjit_SOURCES
	"asmjit/src/asmjit/a64.h"
	"asmjit/src/asmjit/arm.h"
	"asmjit/src/asmjit/asmjit-scope-begin.h"
	"asmjit/src/asmjit/asmjit-scope-end.h"
	"asmjit/src/asmjit/asmjit.h"
	"asmjit/src/asmjit/core.h"
	"asmjit/src/asmjit/x86.h"
	"asmjit/src/asmjit/core/api-build_p.h"
	"asmjit/src/asmjit/core/api-config.h"
	"asmjit/src/asmjit/core/archcommons.h"
	"asmjit/src/asmjit/core/archtraits.h"
	"asmjit/src/asmjit/core/assembler.h"
	"asmjit/src/asmjit/core/builder.h"
	"asmjit/src/asmjit/core/codebuffer.h"
	"asmjit/src/asmjit/core/codeholder.h"
	"asmjit/src/asmjit/core/codewriter_p.h"
	"asmjit/src/asmjit/core/compiler.h"
	"asmjit/src/asmjit/core/compilerdefs.h"
	"asmjit/src/asmjit/core/constpool.h"
	"asmjit/src/asmjit/core/cpuinfo.h"
	"asmjit/src/asmjit/core/emithelper_p.h"
	"asmjit/src/asmjit/core/emitter.h"
	"asmjit/src/asmjit/core/emitterutils_p.h"
	"asmjit/src/asmjit/core/environment.h"
	"asmjit/src/asmjit/core/errorhandler.h"
	"asmjit/src/asmjit/core/formatter.h"
	"asmjit/src/asmjit/core/formatter_p.h"
	"asmjit/src/asmjit/core/func.h"
	"asmjit/src/asmjit/core/funcargscontext_p.h"
	"asmjit/src/asmjit/core/globals.h"
	"asmjit/src/asmjit/core/inst.h"
	"asmjit/src/asmjit/core/jitallocator.h"
	"asmjit/src/asmjit/core/jitruntime.h"
	"asmjit/src/asmjit/core/logger.h"
	"asmjit/src/asmjit/core/misc_p.h"
	"asmjit/src/asmjit/core/operand.h"
	"asmjit/src/asmjit/core/osutils.h"
	"asmjit/src/asmjit/core/osutils_p.h"
	"asmjit/src/asmjit/core/raassignment_p.h"
	"asmjit/src/asmjit/core/rabuilders_p.h"
	"asmjit/src/asmjit/core/radefs_p.h"
	"asmjit/src/asmjit/core/ralocal_p.h"
	"asmjit/src/asmjit/core/rapass_p.h"
	"asmjit/src/asmjit/core/rastack_p.h"
	"asmjit/src/asmjit/core/string.h"
	"asmjit/src/asmjit/core/support.h"
	"asmjit/src/asmjit/core/target.h"
	"asmjit/src/asmjit/core/type.h"
	"asmjit/src/asmjit/core/virtmem.h"
	"asmjit/src/asmjit/core/zone.h"
	"asmjit/src/asmjit/core/zonehash.h"
	"asmjit/src/asmjit/core/zonelist.h"
	"asmjit/src/asmjit/core/zonestack.h"
	"asmjit/src/asmjit/core/zonestring.h"
	"asmjit/src/asmjit/core/zonetree.h"
	"asmjit/src/asmjit/core/zonevector.h"
	"asmjit/src/asmjit/core/archtraits.cpp"
	"asmjit/src/asmjit/core/assembler.cpp"
	"asmjit/src/asmjit/core/builder.cpp"
	"asmjit/src/asmjit/core/codeholder.cpp"
	"asmjit/src/asmjit/core/codewriter.cpp"
	"asmjit/src/asmjit/core/compiler.cpp"
	"asmjit/src/asmjit/core/constpool.cpp"
	"asmjit/src/asmjit/core/cpuinfo.cpp"
	"asmjit/src/asmjit/core/emithelper.cpp"
	"asmjit/src/asmjit/core/emitter.cpp"
	"asmjit/src/asmjit/core/emitterutils.cpp"
	"asmjit/src/asmjit/core/environment.cpp"
	"asmjit/src/asmjit/core/errorhandler.cpp"
	"asmjit/src/asmjit/core/formatter.cpp"
	"asmjit/src/asmjit/core/func.cpp"
	"asmjit/src/asmjit/core/funcargscontext.cpp"
	"asmjit/src/asmjit/core/globals.cpp"
	"asmjit/src/asmjit/core/inst.cpp"
	"asmjit/src/asmjit/core/jitallocator.cpp"
	"asmjit/src/asmjit/core/jitruntime.cpp"
	"asmjit/src/asmjit/core/logger.cpp"
	"asmjit/src/asmjit/core/operand.cpp"
	"asmjit/src/asmjit/core/osutils.cpp"
	"asmjit/src/asmjit/core/ralocal.cpp"
	"asmjit/src/asmjit/core/rapass.cpp"
	"asmjit/src/asmjit/core/rastack.cpp"
	"asmjit/src/asmjit/core/string.cpp"
	"asmjit/src/asmjit/core/support.cpp"
	"asmjit/src/asmjit/core/target.cpp"
	"asmjit/src/asmjit/core/type.cpp"
	"asmjit/src/asmjit/core/virtmem.cpp"
	"asmjit/src/asmjit/core/zone.cpp"
	"asmjit/src/asmjit/core/zonehash.cpp"
	"asmjit/src/asmjit/core/zonelist.cpp"
	"asmjit/src/asmjit/core/zonestack.cpp"
	"asmjit/src/asmjit/core/zonetree.cpp"
	"asmjit/src/asmjit/core/zonevector.cpp"
	"asmjit/src/asmjit/x86/x86archtraits_p.h"
	"asmjit/src/asmjit/x86/x86assembler.h"
	"asmjit/src/asmjit/x86/x86builder.h"
	"asmjit/src/asmjit/x86/x86compiler.h"
	"asmjit/src/asmjit/x86/x86emithelper_p.h"
	"asmjit/src/asmjit/x86/x86emitter.h"
	"asmjit/src/asmjit/x86/x86formatter_p.h"
	"asmjit/src/asmjit/x86/x86func_p.h"
	"asmjit/src/asmjit/x86/x86globals.h"
	"asmjit/src/asmjit/x86/x86instapi_p.h"
	"asmjit/src/asmjit/x86/x86instdb.h"
	"asmjit/src/asmjit/x86/x86instdb_p.h"
	"asmjit/src/asmjit/x86/x86opcode_p.h"
	"asmjit/src/asmjit/x86/x86operand.h"
	"asmjit/src/asmjit/x86/x86rapass_p.h"
	"asmjit/src/asmjit/x86/x86assembler.cpp"
	"asmjit/src/asmjit/x86/x86builder.cpp"
	"asmjit/src/asmjit/x86/x86compiler.cpp"
	"asmjit/src/asmjit/x86/x86emithelper.cpp"
	"asmjit/src/asmjit/x86/x86formatter.cpp"
	"asmjit/src/asmjit/x86/x86func.cpp"
	"asmjit/src/asmjit/x86/x86instapi.cpp"
	"asmjit/src/asmjit/x86/x86instdb.cpp"
	"asmjit/src/asmjit/x86/x86operand.cpp"
	"asmjit/src/asmjit/x86/x86rapass.cpp"
)

set(CMKR_SOURCES ${asmjit_SOURCES})
add_library(asmjit INTERFACE)

if(asmjit_SOURCES)
	target_sources(asmjit INTERFACE ${asmjit_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${asmjit_SOURCES})

target_compile_definitions(asmjit INTERFACE
	ASMJIT_STATIC
	ASMJIT_NO_AARCH32
	ASMJIT_NO_AARCH64
)

target_include_directories(asmjit INTERFACE
	"asmjit/src"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target argparse
set(CMKR_TARGET argparse)
set(argparse_SOURCES "")

set(CMKR_SOURCES ${argparse_SOURCES})
add_library(argparse INTERFACE)

if(argparse_SOURCES)
	target_sources(argparse INTERFACE ${argparse_SOURCES})
endif()

target_include_directories(argparse INTERFACE
	"argparse/include"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target pepp
set(CMKR_TARGET pepp)
set(pepp_SOURCES "")

list(APPEND pepp_SOURCES
	"pepp/pepp/ExportDirectory.hpp"
	"pepp/pepp/FileHeader.hpp"
	"pepp/pepp/Image.hpp"
	"pepp/pepp/ImportDirectory.hpp"
	"pepp/pepp/OptionalHeader.hpp"
	"pepp/pepp/PEHeader.hpp"
	"pepp/pepp/PELibrary.hpp"
	"pepp/pepp/PEUtil.hpp"
	"pepp/pepp/RelocationDirectory.hpp"
	"pepp/pepp/SectionHeader.hpp"
	"pepp/pepp/misc/Address.hpp"
	"pepp/pepp/misc/ByteVector.hpp"
	"pepp/pepp/misc/Concept.hpp"
	"pepp/pepp/misc/File.hpp"
	"pepp/pepp/misc/NonCopyable.hpp"
	"pepp/pepp/ExportDirectory.cpp"
	"pepp/pepp/Image.cpp"
	"pepp/pepp/ImportDirectory.cpp"
	"pepp/pepp/OptionalHeader.cpp"
	"pepp/pepp/PEHeader.cpp"
	"pepp/pepp/PEUtil.cpp"
	"pepp/pepp/RelocationDirectory.cpp"
	"pepp/pepp/SectionHeader.cpp"
	"pepp/pepp/misc/File.cpp"
)

set(CMKR_SOURCES ${pepp_SOURCES})
add_library(pepp INTERFACE)

if(pepp_SOURCES)
	target_sources(pepp INTERFACE ${pepp_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${pepp_SOURCES})

target_include_directories(pepp INTERFACE
	pepp
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

